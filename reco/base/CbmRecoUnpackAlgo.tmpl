/* Copyright (C) 2010 - 2021 Goethe-University Frankfurt
   SPDX-License-Identifier: GPL-3.0-only
   Authors: Pascal Raisig */

/**
 * @file CbmRecoUnpackAlgo.tmpl
 * @author Pascal Raisig (praisig@ikf.uni-frankfurt.de)
 * @brief Baseclass for the Trd unpacker algorithms
 * @version 0.1
 * @date 2021-04-21
 *
 * @copyright Copyright (c) 2021
 *
 * This is the base class for the algorithmic part of the tsa data unpacking
 * processes of the CbmTrd.
 * The actual translation from tsa to digi happens in the derived classes.
 *
 *
*/

#ifndef CbmRecoUnpackAlgo_TMPL
#define CbmRecoUnpackAlgo_TMPL

#include <MicrosliceDescriptor.hpp>
#include <Timeslice.hpp>  // timeslice

#include <FairParGenericSet.h>  // for par container vector
#include <FairTask.h>           // for Bool_t
#include <Logger.h>             // for log output

#include <Rtypes.h>  // for types
#include <RtypesCore.h>
#include <tuple>
#include <type_traits>

#include <algorithm>
#include <cstddef>
#include <cstdint>  // for types
#include <iomanip>
#include <memory>
#include <vector>

#include <cmath>


template<typename TOutput, typename TOptOutA = std::nullptr_t, typename TOptOutB = std::nullptr_t>
class CbmRecoUnpackAlgo {

public:
  /** @brief Create the Cbm Trd Unpack AlgoBase object */
  CbmRecoUnpackAlgo(std::string name) : fName(name) {};

  /** @brief Destroy the Cbm Trd Unpack Task object */
  virtual ~CbmRecoUnpackAlgo() {};

  /** @brief Copy constructor - not implemented **/
  CbmRecoUnpackAlgo(const CbmRecoUnpackAlgo&) = delete;

  /** @brief Assignment operator - not implemented **/
  CbmRecoUnpackAlgo& operator=(const CbmRecoUnpackAlgo&) = delete;

protected:
  // Output vectors
  /** @brief Default return vector for Unpack function. */
  std::vector<TOutput> fOutputVec = {};

  /** @brief Opt output vector connected to the framework. */
  std::vector<TOptOutA>* fOptOutAVec = {};

  /** @brief Opt output vectors connected to the framework. */
  std::vector<TOptOutB>* fOptOutBVec = {};

  // Parameter storage members

  /** @brief Vector with the parameter containers and the paths to the connected ascii files of the TRD */
  std::vector<std::pair<std::string, std::shared_ptr<FairParGenericSet>>> fParContVec = {};

  /** @brief Base path to the trd parameter files. */
  std::string fParFilesBasePath = "";

  /**
   * @brief Time offset for the system
   * @todo This should be module and channel dependent and included into the asic parameters
  */
  std::int32_t fSystemTimeOffset = 0;

  /** @brief Check if we are looking at the first timeslice and if so extract the required TS parameters */
  bool fIsFirstTs = true;

  /** @brief The unpacker algo ignores the overlapp microslices if true.*/
  bool fDoIgnoreOverlappMs = true;

  /** @brief Number of microslices per timeslice */
  std::uint32_t fNrMsPerTs = 0;

  /** @brief Number of core microslices per timeslice */
  std::uint32_t fNrCoreMsPerTs = 0;

  /** @brief Number of overlapp microslices per timeslice */
  std::uint32_t fNrOverlappMsPerTs = 0;

  /** @brief Name of the unpacker class, used for logging output */
  std::string fName = "";

  /** @brief Full length of the TS [ns], currently automatically calculated with fMsLength and fNrMsPerTs */
  size_t fTsLength = 0;

  /** @brief Core length of the TS [ns], currently automatically calculated with fMsLength and fNrCoreMsPerTs */
  size_t fTsCoreLength = 0;

  /** @brief counter of processed timeslices */
  size_t fNrProcessedTs = 0;

  /** @brief counter of created raw messages */
  size_t fNrCreatedDigis = 0;

  /** @brief counter of created raw messages */
  size_t fNrCreatedRawMsgs = 0;

  /** @brief counter of created raw messages */
  size_t fNrCreatedInfoMsgs = 0;

  /** @brief counter of created raw messages */
  size_t fNrEpochMsgs = 0;

  /** @brief Sum counter for used cpu time by this algo [µs].*/
  double fSumCpuTime = 0;

  /** @brief Sum counter for used wall time by this algo [µs].*/
  double fSumWallTime = 0;

  /** @brief Sum counter for size of the input data of this algo.*/
  double fSumInDataSize = 0;

  /** @brief Sum counter for size of the output data of this algo.*/
  double fSumOutDataSize = 0;

  /** @brief counter for inf/error flags from the µSlices */
  size_t fNrCrcValidFlags = 0;
  /** @brief counter for inf/error flags from the µSlices */
  size_t fNrOverflowFlimFlags = 0;
  /** @brief counter for inf/error flags from the µSlices */
  size_t fNrOverflowUserFlags = 0;
  /** @brief counter for inf/error flags from the µSlices */
  size_t fNrDataErrorFlags = 0;

  /** @brief Time of the last succesful digest hit message */
  size_t fLastFulltime = 0;

  /** @brief Start time of the current TS [ns] */
  size_t fTsStartTime = 0;

  /** @brief Index of the current TS */
  size_t fTsIndex = 0;

  /** @brief Additional explicit finish function of the derived algo implementations. */
  virtual void finish() = 0;

  /**
   * @brief Get the Timeslice Params and transfer them to the member variables
   *
   * @param ts
  */
  void getTimesliceParams(const fles::Timeslice* ts)
  {
    // Get microslice length and "number of" information
    fNrCoreMsPerTs     = ts->num_core_microslices();
    fNrMsPerTs         = ts->num_microslices(0);
    fNrOverlappMsPerTs = fNrMsPerTs - fNrCoreMsPerTs;


    LOG(debug4) << fName << "::getTimesliceParams :";
    LOG(debug4) << "Timeslice parameters: each TS has " << fNrCoreMsPerTs << " Core MS and " << fNrOverlappMsPerTs
                << " Overlap MS, for a TS core duration of " << fTsCoreLength << " ns and a full duration of "
                << fTsLength << " ns";

    // deactivate this function after it has been run once.
    fIsFirstTs = false;
  }

  /**
   * @brief Forward the parameters stored in the containers to the member variables.
   *
   * @retval Bool_t initOk   If not kSUCCESS, task will be set inactive.
  */
  Bool_t initParContainers()
  {
    LOG(debug4) << fName << "::Init - InitParContainers";

    auto initOk                                               = kTRUE;
    std::vector<std::shared_ptr<FairParGenericSet>> requested = {};
    std::vector<bool> reqs                                    = {};


    for (auto pair : fParContVec) {
      auto parcontainer = pair.second;
      initOk            = initParSet(parcontainer.get());
      // Check if a required container is missing after we went through all passed containers.
      if (!initOk) {
        LOG(error) << fName << "::InitParContainers() initParSet failed for the required paramater container "
                   << parcontainer->ClassName() << ", please check!";
        return kFALSE;
      }
    }
    return kTRUE;
  }

  /**
   * @brief Handles the distribution of the hidden derived classes to their explicit functions.
   *
   * @param parset
   * @return Bool_t
  */
  virtual Bool_t initParSet(FairParGenericSet* parset) = 0;

  /**
   * @brief Set the Derived Ts Parameters
   *
   * In this function parameters required by the explicit algo connected to the timeslice can be set.
   *
   * @param itimeslice
   * @return true
   * @return false
  */
  virtual bool setDerivedTsParameters(size_t /*itimeslice*/) { return true; }


  /**
   * @brief Intialisation at begin of run. Special inits of the derived algos.
   *
   * @retval Bool_t initOk
  */
  virtual Bool_t init() = 0;

  /** @brief Sort a vector timewise vector type has to provide GetTime() */
  template<class vecobj>
  void timesort(std::vector<vecobj>* vec)
  {
    std::sort(vec->begin(), vec->end(),
              [](const vecobj& a, const vecobj& b) -> bool { return a.GetTime() < b.GetTime(); });
  }

  /**
   * @brief Unpack a given microslice. To be implemented in the derived unpacker algos.
   *
   * @param ts timeslice pointer
   * @param icomp index to the component to be unpacked
   * @param imslice index of the microslice to be unpacked
   * @return true
   * @return false
   *
   * @remark The content of the µslice can only be accessed via the timeslice. Hence, we need to pass the pointer to the full timeslice
  */
  virtual bool unpack(const fles::Timeslice* ts, std::uint16_t icomp, UInt_t imslice) = 0;

  /**
   * @brief Use this function to implement additional actions to be called to finalize component if necessary.
            (e.g. copy from temp buffers)
  */
  virtual void FinalizeComponent() { return; };

public:
  // Runtime functions

  /** @brief Add used cpu time, used in CbmRecoUnpack for performance profiling. @param value cpu time of last timeslice processing */
  void AddCpuTime(double value) { fSumCpuTime += value; }

  /**
   * @brief Add a parameter container and the path to its ascii input. Note that all containers have to be derived from FairParGenericSet.
   * @param pair
  */
  void AddParContainer(std::pair<std::string, std::shared_ptr<FairParGenericSet>> pair)
  {
    fParContVec.emplace_back(pair);
  }

  /** @brief Add used wall time, used in CbmRecoUnpack for performance profiling. @param value wall time of last timeslice processing */
  void AddWallTime(double value) { fSumWallTime += value; }

  /**
   * @brief Action at end of run.
   *
  */
  void Finish()
  {
    LOG(info) << fName << "::Finish.-------------------------\n Unpack process : \n " << fNrProcessedTs
              << " Timeslices with \n " << fNrCreatedRawMsgs << " Raw Messages,\n " << fNrCreatedDigis
              << " Digis \n ...processed in walltime(cputime) " << std::setprecision(4) << fSumWallTime << "("
              << std::setprecision(4) << fSumCpuTime << ") µs \n "
              << "-->" << std::setprecision(4) << fNrCreatedDigis / fSumWallTime << "(" << std::setprecision(4)
              << fNrCreatedDigis / fSumCpuTime << ") Digis/µs <--> " << std::setprecision(4)
              << fSumWallTime / fNrCreatedDigis << "(" << std::setprecision(4) << fSumCpuTime / fNrCreatedDigis
              << ") µs/Digi.\n "
              << "Processed amount of input data " << std::setprecision(4) << fSumInDataSize << " MB digested to "
              << fSumOutDataSize << " MB output data <--> " << std::setprecision(4) << fSumInDataSize / fSumWallTime
              << " MB/µs digested. \n";


    LOG(debug) << fNrEpochMsgs << " Epoch Messages,\n " << fNrCreatedInfoMsgs << " Info Messages.\n "
               << fNrCrcValidFlags << " CrcValidFlags \n " << fNrOverflowFlimFlags << " OverflowFlimFlags \n "
               << fNrOverflowUserFlags << " OverflowUserFlags \n " << fNrDataErrorFlags << " DataErrorFlags \n ";

    // Additional explicit finish of the derived class used during runtime.
    finish();

    LOG(info) << fName << "::Finish. Done! ------------------\n";
  }

  /**
   * @brief Get the Name of the (derived) object
   *
   * @return std::string
  */
  std::string GetName() { return fName; }

  // Getters
  /**
   * @brief Get a given output vector connected to the tree, if called after calling InitUnpacker().
   *
   * @return std::vector<TOptOutA>*
  */
  std::vector<TOptOutA>* GetOptOutAVec() { return fOptOutAVec; }

  /**
   * @brief Get a given output vector connected to the tree, if called after calling InitUnpacker().
   *
   * @return std::vector<TOptOutB>*
  */
  std::vector<TOptOutB>* GetOptOutBVec() { return fOptOutBVec; }

  /**
   * @brief Get the Output Obj Size
   *
   * @return size_t
  */
  static size_t GetOutputObjSize() { return sizeof(TOutput); }

  /**
   * @brief Get the requested parameter containers. To be defined in the derived classes!
   * Return the required parameter containers together with the paths to the ascii
   * files to.
   *
   * @param[in] std::string geoTag as used in CbmSetup
   * @param[in] std::uint32_t runId for runwise defined parameters
   * @return fParContVec
  */
  virtual std::vector<std::pair<std::string, std::shared_ptr<FairParGenericSet>>>*
    GetParContainerRequest(std::string /*geoTag*/, std::uint32_t /*runId*/)
  {
    return {};
  }

  /**
   * @brief Initialisation at begin of run.
   *
   * Runs for all types of algos. In case you need a specialised init function add it as protected function and call it in this Init function.
   *
   * @retval Bool_t initOk   If not kTRUE, task will be set inactive.
  */
  Bool_t Init()
  {
    LOG(info) << fName << "::Init()";

    auto initOk = kTRUE;

    initOk &= init();

    initOk &= initParContainers();

    LOG(info)<< fName <<"::SystemTimeOffset:" << GetSystemTimeOffset();

    return initOk;
  }

  // Setters
  /**
   * @brief Set the Do Ignore Overlapp µslices flag
   *
   * @param value
  */
  void SetDoIgnoreOverlappMs(bool value = false) { fDoIgnoreOverlappMs = value; }

  /** @brief Set the optional output A vector @param vec */
  void SetOptOutAVec(std::vector<TOptOutA>* vec) { fOptOutAVec = vec; }

  /** @brief Set the optional output B vector @param vec */
  void SetOptOutBVec(std::vector<TOptOutB>* vec) { fOptOutBVec = vec; }

  /**
   * @brief Set the base path to the parameter containers.
   *
   * @param value
  */
  void SetParFilesBasePath(std::string value) { fParFilesBasePath = value; }

  /** @brief Set the global system time offset @remark in princible this should go to parameters */
  void SetSystemTimeOffset(int32_t value) { fSystemTimeOffset = value; }

  /** @brief Get the global system time offset @remark in princible this should go to parameters */
  int32_t GetSystemTimeOffset() { return fSystemTimeOffset; }

  /** @brief Set the start time of the current TS */
  void SetTsStartTime(size_t value) { fTsStartTime = value; }

  /**
   * @brief Actual unpacking function
   *
   * @param option
   * @return true
   * @return false
  */
  std::vector<TOutput> Unpack(const fles::Timeslice* ts, std::uint16_t icomp)
  {
    bool unpackOk = true;

    // Clear the default return vector
    fOutputVec.clear();

    /// On first TS, extract the TS parameters from header (by definition stable over time).
    if (fIsFirstTs) getTimesliceParams(ts);

    // Get the index of the current timeslice
    fTsIndex = ts->index();

    // Get the number of the current timeslice (the index increases currently via nthTimeslice* fNrCoreMsPerTs)
    size_t itimeslice = fTsIndex / fNrCoreMsPerTs;

    // Set further parameters required by the explicit algorithm
    setDerivedTsParameters(itimeslice);


    auto nrMsToLoop = fDoIgnoreOverlappMs ? fNrCoreMsPerTs : fNrMsPerTs;
    LOG(debug)<< fName <<"::Unpack: nb MS used is " << nrMsToLoop;

    /// Loop over choosen microslices (all or core only)
    for (UInt_t imslice = 0; imslice < nrMsToLoop; imslice++) {
      unpackOk &= unpack(ts, icomp, imslice);
      if (!unpackOk) {
        /** @todo add potential counter for corrupted microslices */
        continue;
      }
    }

    /// Give opportunity to finalize component (e.g. copy from temp buffers) if necessary
    FinalizeComponent();

    auto ndigis = fOutputVec.size();
    fNrCreatedDigis += ndigis;

    // Get the input(output) data sizes
    fSumInDataSize += ts->size_component(icomp) / 1.0e6;
    fSumOutDataSize += ndigis * GetOutputObjSize() / 1.0e6;

    ++fNrProcessedTs;
    return fOutputVec;
  }
};

#endif  // CbmRecoUnpackAlgo_H
